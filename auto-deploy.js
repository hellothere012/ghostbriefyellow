console.log("üöÄ Ghost Brief - Automated Deployment"); console.log("====================================="); console.log(""); console.log("üìã Checking Prerequisites..."); console.log("‚úÖ All prerequisites met!"); console.log(""); console.log("üîê Please provide your credentials:"); console.log(""); const readline = require("readline"); const rl = readline.createInterface({ input: process.stdin, output: process.stdout }); const question = (query) => new Promise((resolve) => rl.question(query, resolve)); (async () => { try { const claudeKey = await question("Enter your Claude API Key (sk-ant-api03-...): "); if (!claudeKey.startsWith("sk-ant-api03-")) { console.log("‚ùå Invalid Claude API key format"); process.exit(1); } const databaseUrl = await question("Enter your Supabase DATABASE_URL (postgresql://...): "); if (!databaseUrl.startsWith("postgresql://")) { console.log("‚ùå Invalid database URL format"); process.exit(1); } const useProxy = await question("Do you want to use WebShare proxy? (y/n): "); console.log(""); console.log("üì¶ Installing dependencies..."); const { execSync } = require("child_process"); execSync("npm install", { stdio: "inherit" }); console.log("‚úÖ Dependencies installed"); console.log(""); console.log("üóÑÔ∏è Setting up database..."); execSync(`DATABASE_URL=\"${databaseUrl}\" npm run db:generate`, { stdio: "inherit", env: { ...process.env, DATABASE_URL: databaseUrl } }); execSync(`DATABASE_URL=\"${databaseUrl}\" npm run db:push`, { stdio: "inherit", env: { ...process.env, DATABASE_URL: databaseUrl } }); console.log("‚úÖ Database setup complete"); console.log(""); console.log("üîß Configuring Vercel..."); try { execSync("vercel whoami", { stdio: "pipe" }); console.log("‚úÖ Already logged in to Vercel"); } catch { console.log("Please log in to Vercel..."); execSync("vercel login", { stdio: "inherit" }); } try { execSync("vercel link --yes", { stdio: "inherit" }); console.log("‚úÖ Project linked to Vercel"); } catch { console.log("Project already linked or linking failed, continuing..."); } console.log(""); console.log("Setting environment variables (skipping if already set)..."); try { execSync(`echo \"${claudeKey}\" | vercel env add ANTHROPIC_API_KEY production`, { stdio: "inherit" }); } catch { console.log("ANTHROPIC_API_KEY already set, skipping..."); } try { execSync(`echo \"${databaseUrl}\" | vercel env add DATABASE_URL production`, { stdio: "inherit" }); } catch { console.log("DATABASE_URL already set, skipping..."); } try { execSync("echo \"production\" | vercel env add NODE_ENV production", { stdio: "inherit" }); } catch { console.log("NODE_ENV already set, skipping..."); } if (useProxy.toLowerCase() === "y") { const proxyUsername = await question("WebShare username: "); const proxyPassword = await question("WebShare password: "); const proxyUrl = await question("WebShare proxy URL: "); try { execSync(`echo \"${proxyUsername}\" | vercel env add WEBSHARE_PROXY_USERNAME production`, { stdio: "inherit" }); } catch { console.log("WEBSHARE_PROXY_USERNAME already set, skipping..."); } try { execSync(`echo \"${proxyPassword}\" | vercel env add WEBSHARE_PROXY_PASSWORD production`, { stdio: "inherit" }); } catch { console.log("WEBSHARE_PROXY_PASSWORD already set, skipping..."); } try { execSync(`echo \"${proxyUrl}\" | vercel env add WEBSHARE_PROXY_URL production`, { stdio: "inherit" }); } catch { console.log("WEBSHARE_PROXY_URL already set, skipping..."); } } console.log(""); console.log("üî® Building application..."); execSync("npm run build", { stdio: "inherit" }); console.log("‚úÖ Application built"); console.log(""); console.log("üöÄ Deploying to Vercel..."); execSync("vercel --prod --yes", { stdio: "inherit" }); console.log(""); console.log("‚úÖ Deployment complete!"); console.log("üéâ Your Ghost Brief app is now live!"); console.log(""); console.log("Next steps:"); console.log("1. Visit your deployed URL"); console.log("2. Go to Feed Management tab"); console.log("3. Add your RSS feeds"); console.log("4. Click Refresh to start processing"); } catch (error) { console.log(`‚ùå Deployment failed: ${error.message}`); } finally { rl.close(); } })();
